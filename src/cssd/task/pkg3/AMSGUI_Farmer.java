/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cssd.task.pkg3;

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.util.ArrayList;

/**
 *
 * @author b3014277, trkirk
 */
public class AMSGUI_Farmer extends AMSGUI_User
{
    private Farmer currentFarmer = null;
    
    private Field currentField;
    private SetOfSensorReadings currentSensorReadings;
    private SetOfFields fields;
    //private ArrayList<Planting> availableCrops;
    
    private MenuPanel_Farmer menu;
    private FieldsPanel1_Selection fp1;
    private FieldsPanel2_Options fp2;
    private FieldsPanel3_CheckCrops fp3;
    private FieldsPanel4_RecordHarvest fp4;
    private FieldsPanel5_RecordPlanting fp5;
    
    /**
     * Creates new form AMSGUI
     */
    public AMSGUI_Farmer(Farmer currentFarmer, Server server) {
        super();
        initComponents();
        
        this.currentServer = server;
        this.currentFarmer = currentFarmer;
        this.fields = currentFarmer.getFields();
        
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setTitle("AMS");
        setSize(660, 550);
        
        initManualComponents();
        
        jbl_username.setText( currentFarmer.getUsername() );
        
        addFarmerListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 153, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 661, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    @Override
    protected void initManualComponents(){
        
        menu = new MenuPanel_Farmer();
        fp1 = new FieldsPanel1_Selection();
        fp2 = new FieldsPanel2_Options();
        fp3 = new FieldsPanel3_CheckCrops();
        fp4 = new FieldsPanel4_RecordHarvest();
        fp5 = new FieldsPanel5_RecordPlanting();
        
        layout = new CardLayout();
        
        fp1.model = new DefaultListModel<Field>();
        
        for(int i=0; i<currentFarmer.getFields().size(); ++i){
            fp1.model.addElement("Field " + (i+1));
        }
        
        fp1.jlPickField.setModel(fp1.model);
        
        contentPane.setLayout(layout);
        contentPane.add(menu, "menu");
        contentPane.add(fp1, "fp1");
        contentPane.add(fp2, "fp2");
        contentPane.add(fp3, "fp3");
        contentPane.add(fp4, "fp4");
        contentPane.add(fp5, "fp5");
        contentPane.add(op1, "op1");
        
        pack();
        setLocationByPlatform(true);
        
        layout.show(contentPane, "menu");
    }
    
    private void displayFields(){
        layout.show(contentPane, "fp1");
    }
    
    private void viewField(){
            layout.show(contentPane, "fp2");
    }
    
    private void displayRecordHarvest(){
        layout.show(contentPane, "fp4");
    }
    
    private void displayCropTypes(){
        // TO DO
    }
    
    private void addFarmerListeners(){
        
        menu.jbtn_viewOrders.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                displayOrders();
            }
        });
        
        menu.jbtn_viewFields.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                displayFields();
            }
        });
        
        fp1.jbtn_back.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                layout.show(contentPane, "menu");
            }
        });
        
        fp1.jlPickField.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent listSelectionEvent) {
                currentField = fields.getFieldByIndex(fp1.jlPickField.getSelectedIndex());
            }
        });
        
        fp1.jbtn_options.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                
                if(currentField != null){
                    
                    fp2.jbl_fieldname.setText("View Field  - " + fp1.jlPickField.getSelectedValue());
                    viewField();
                }
                else{
                    JOptionPane.showMessageDialog(getContentPane(), "No field selected");
                }
            }
        });
        
        fp2.jbtn_back.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                layout.show(contentPane, "fp1");
            }
        });
        
        fp2.jbtn_checkCrops.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                
                fp3.jtf_airTemp.setText(currentField.currentPlanting.getPreferredAirTemperatureLevel() + "");
                fp3.jtf_light.setText(currentField.currentPlanting.getLight() + "");
                fp3.jtf_soilAcidity.setText(currentField.currentPlanting.getPreferredSoilAcidityLevel() + "");
                fp3.jtf_soilMoisture.setText(currentField.currentPlanting.getPreferredSoilMoistureLevel() + "");
                fp3.jtf_soilTemp.setText(currentField.currentPlanting.getPreferredSoilTemperatureLevel() + "");
                
                layout.show(contentPane, "fp3");
            }
        });
        
        fp2.jbtn_recordHarvest.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                displayRecordHarvest();
            }
        });
        
        fp2.jbtn_recordPlanting.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                layout.show(contentPane, "fp5");
            }
        });
        
        fp3.jbtn_back.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                layout.show(contentPane, "fp2");
            }
        });
        
        fp4.jbtn_back.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                layout.show(contentPane, "fp2");
            }
        });
        
        fp5.jbtn_back.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                layout.show(contentPane, "fp2");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
